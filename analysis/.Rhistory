gender = cov %>%
freq_table(gender) %>%
flextable()
gender
gender_dth = dth %>%
freq_table(sex) %>%
flextable()
gender_dth
cov$age = as.numeric(cov$age)
cov["age_group"] = cut(cov$age, c(0, 14, 24,34, 44, 54, 64, 74, 84, 94, Inf),
c("0-14","15-24","25-34","35-44","45-54","55-64",
"65-74","75-84","85-94","> 95"), include.lowest=TRUE)
age_groups =  cov %>%
freq_table(age_group) %>%
flextable()
age_groups
dth$age = as.numeric(dth$age)
dth["age_group"] = cut(dth$age, c(0, 14, 24,34, 44, 54, 64, 74, 84, 94, Inf),
c("0-14","15-24","25-34","35-44","45-54","55-64",
"65-74","75-84","85-94","> 95"), include.lowest=TRUE)
age_groups_dth =  dth %>%
freq_table(age_group) %>%
flextable()
age_groups_dth
age_groups_all =  cov %>%
freq_table(age_group) %>%
mutate(death = "no") %>%
mutate(n_all=n) %>%
select(age_group, n_all)
age_groups_death =  dth %>%
freq_table(age_group) %>%
mutate(death = "yes") %>%
mutate(n_death=n) %>%
select(age_group, n_death)
age_summ = age_groups_all %>%
inner_join(age_groups_death) %>%
mutate(ratio = (n_death/n_all)*100) %>%
mutate(diff = ratio-lag(ratio)) %>%
select(age_group,ratio,diff) %>%
flextable()
age_summ
age_gender = cov %>%                          # case linelist
tabyl(age_group, gender) %>%                # cross-tabulate counts
adorn_totals(where = "row") %>%             # add a total row
adorn_percentages(denominator = "col") %>%  # convert to proportions
adorn_pct_formatting() %>%                  # convert to percents
adorn_ns(position = "front") %>%            # display as: "count (percent)"
flextable()
age_gender
age_gender_dth = dth %>%                          # case linelist
tabyl(age_group, sex) %>%                # cross-tabulate counts
adorn_totals(where = "row") %>%             # add a total row
adorn_percentages(denominator = "col") %>%  # convert to proportions
adorn_pct_formatting() %>%                  # convert to percents
adorn_ns(position = "front") %>%            # display as: "count (percent)"
flextable()
age_gender_dth
piramid = apyramid::age_pyramid(data = cov,
age_group = "age_group",
split_by = "gender",
proportional = TRUE)
piramid
piramid_dth = apyramid::age_pyramid(data = dth,
age_group = "age_group",
split_by = "sex",
proportional = TRUE)
piramid_dth
vac_piramid=apyramid::age_pyramid(data = cov,
age_group = "age_group",
split_by = "is_f_vac")
pop_data <- cov %>%
group_by(gender, age_group) %>%
summarise(counts=n()) %>%
mutate(
percent  = round(100*(counts / sum(counts, na.rm=T)),1),  # % of total
percent  = case_when(
gender == "F" ~ percent,
gender == "M" ~ -percent,               # if male, convert % to negative
TRUE          ~ NA_real_))
case_data <- dth %>%
group_by(sex, age_group) %>%
mutate(sex = recode(sex, "жена" = 'F', "мъж" = 'M')) %>%
summarise(counts=n()) %>%
mutate(
percent  = round(100*(counts / sum(counts, na.rm=T)),1),  # % of total
percent  = case_when(
sex == "F" ~ percent,
sex == "M" ~ -percent,               # if male, convert % to negative
TRUE          ~ NA_real_)) %>%
rename(gender = sex)
# combine case and population data (same column names, age_cat values, and gender values)
pyramid_data <- bind_rows("cases" = case_data, "population" = pop_data, .id = "data_source")
# Define extent of percent axis, used for plot limits
max_per <- max(pyramid_data$percent, na.rm=T)
min_per <- min(pyramid_data$percent, na.rm=T)
age_levels <- c("0-14","15-24","25-34","35-44","45-54","55-64",
"65-74","75-84","85-94","> 95")
# begin ggplot
##############
bi_plot = ggplot()+  # default x-axis is age in years;
# population data graph
geom_col(
data = pyramid_data %>% filter(data_source == "population"),
mapping = aes(
x = age_group,
y = percent,
fill = gender),
colour = "black",                               # black color around bars
alpha = 0.2,                                    # more transparent
width = 1)+                                     # full width
# case data graph
geom_col(
data = pyramid_data %>% filter(data_source == "cases"),
mapping = aes(
x = age_group,                              # age categories as original X axis
y = percent,                                # % as original Y-axis
fill = gender),                             # fill of bars by gender
colour = "black",                           # black color around bars
alpha = 1,                                      # not transparent
width = 0.3)+                                   # half width
# flip the X and Y axes to make pyramid vertical
coord_flip()+
# manually ensure that age-axis is ordered correctly
scale_x_discrete(limits = age_levels)+     # defined in chunk above
# set percent-axis
scale_y_continuous(
limits = c(min_per, max_per),                                          # min and max defined above
breaks = seq(floor(min_per), ceiling(max_per), by = 2),                # from min% to max% by 2
labels = paste0(                                                       # for the labels, paste together...
abs(seq(floor(min_per), ceiling(max_per), by = 2)), "%"))+
# designate colors and legend labels manually
scale_fill_manual(
values = c("F" = "pink",         # assign colors to values in the data
"M" = "darkblue"),
labels = c("F" = "Жени",
"M"= "Мъже"),      # change labels that appear in legend, note order
) +
# plot labels, titles, caption
labs(
title = "Възрастова и полова структура на починалите спрямо инфектираните",
subtitle = "",
x = "Група",
y = "%",
fill = NULL,
caption = stringr::str_glue("Данните за починалите включват периода \nот: {format(min(dth$add_day, na.rm=T), '%d %b %Y')} до {format(max(dth$add_day, na.rm=T), '%d %b %Y')}")) +
# optional aesthetic themes
theme(
legend.position = "bottom",                             # move legend to bottom
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0),
plot.caption = element_text(hjust=0, size=12, face = "italic"))
bi_plot
province_inf = cov %>%
freq_table(province) %>%
mutate(region=province,
n_infected = n,
prop_infected=prop) %>%
select(region, n_infected, prop_infected)
province_dth = dth %>%
freq_table(nuts2) %>%
mutate(region = nuts2,
n_death = n,
prop_death = prop) %>%
select(region, n_death, prop_death)
province = province_inf %>%
inner_join(province_dth) %>%
mutate(ratio = (n_death/n_infected)*100) %>%
flextable()
province
place = cov %>%
mutate(hospital_treat = if_else(is.na(start_hospis), "Home", "Hospital")) %>%
freq_table(age_group,hospital_treat) %>%
flextable()
place
place_2 = cov %>%
mutate(hospital_treat = if_else(is.na(start_hospis), "Home", "Hospital")) %>%
freq_table(gender,hospital_treat) %>%
flextable()
place_2
place_3 = cov %>%
mutate(hospital_treat = if_else(is.na(start_hospis), "Home", "Hospital")) %>%
freq_table(province,hospital_treat) %>%
flextable()
place_3
vax_status_1 = cov %>%
mutate(hospital_treat = if_else(is.na(start_hospis), "Home", "Hospital")) %>%
mutate(vax_status = if_else(is.na(vaccine_name), "No_vax", "Vax")) %>%
freq_table(vax_status,hospital_treat) %>%
flextable()
vax_status_1
vax_status_2 = cov %>%
mutate(hospital_treat = if_else(is.na(start_hospis), "Home", "Hospital")) %>%
mutate(vax_status = if_else(is.na(vaccine_name), "No_vax", "Vax")) %>%
freq_table(gender,vax_status) %>%
flextable()
vax_status_2
vax_status_3 = cov %>%
mutate(vax_status = if_else(is.na(vaccine_name), "No_vax", "Vax")) %>%
freq_table(province,vax_status) %>%
flextable()
vax_status_3
bi_plot
place_3 = cov %>%
mutate(hospital_treat = if_else(is.na(start_hospis), "Home", "Hospital")) %>%
freq_table(province,hospital_treat) %>%
flextable()
place_3
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(easystats)
library(tayloRswift)
library(readr)
library(officer)
library(janitor)
library(flextable)
library(apyramid)
library(rstatix)
library(gtsummary)
library(arsenal)
library(gt)
library(emmeans)
library(chisq.posthoc.test)
Sys.setlocale(locale = "Bulgarian")
cov = read_csv("C:\\\\Users\\PC\\Desktop\\covid_full.csv",
col_types = cols(exam_date = col_date(format = "%d.%m.%Y"),
lastvac_date = col_date(format = "%d.%m.%Y"),
start_hospis = col_date(format = "%d.%m.%Y"),
end_hospis = col_date(format = "%d.%m.%Y")))
cov = as_tibble(cov)
dth <- read_csv("https://raw.githubusercontent.com/kostadinoff/COVID-19-MH/master/data/COVID_MH_data/deaths.csv", col_types = cols(add_day = col_date(format = "%Y-%m-%d"),
death_day = col_date(format = "%Y-%m-%d")))
dth = as_tibble(dth)
cov = read_csv("C:\\\\Users\\PC\\Desktop\\covid_full.csv",
col_types = cols(exam_date = col_date(format = "%d.%m.%Y"),
lastvac_date = col_date(format = "%d.%m.%Y"),
start_hospis = col_date(format = "%d.%m.%Y"),
end_hospis = col_date(format = "%d.%m.%Y")))
cov = as_tibble(cov)
dth <- read_csv("https://raw.githubusercontent.com/kostadinoff/COVID-19-MH/master/data/COVID_MH_data/deaths.csv", col_types = cols(add_day = col_date(format = "%Y-%m-%d"),
death_day = col_date(format = "%Y-%m-%d")))
dth = as_tibble(dth)
cov = cov %>%
mutate(status = if_else(is.na(outcome_covid), "R", "D")) %>%
mutate(hospital_treat = ifelse(is.na(start_hospis), "Home", "Hospital")) %>%
mutate(wave = case_when(exam_date <='2021-01-23'~ "original_strain",
exam_date > '2021-01-23' & exam_date <= '2021-07-07' ~ "alpha",
exam_date > '2021-07-07' & exam_date <= '2022-01-26' ~ "delta",
exam_date > '2022-01-26'~ "omicron")) %>%
mutate(time_to_event = case_when(hospital_treat == "Hospital" ~difftime(start_hospis, exam_date, units = "days"),
hospital_treat == "Home" ~ 0)) %>%
mutate(time_in_hospital = case_when(hospital_treat == "Hospital" ~difftime(end_hospis, start_hospis, units = "days"),
hospital_treat == "Home" ~ 0)) %>%
mutate(time_to_event = as.numeric(time_to_event)) %>%
mutate(time_in_hospital = as.numeric(time_in_hospital)) %>%
mutate(vax_status = if_else(is.na(vaccine_name), "No_vax", "Vax")) %>%
mutate(vac_status = case_when(vax_status == "Vax" & lastvac_date < exam_date ~ "Vax",
TRUE ~ "No_vax")) %>%
dplyr::select(-vax_status) %>%
mutate(time_after_vax = case_when(vac_status == "Vax" ~ difftime(exam_date,lastvac_date, units = "days"),
vac_status == "No_vax"  ~ 0)) %>%
mutate(time_after_vax = as.numeric(time_after_vax))
cov$time_to_event <- replace(cov$time_to_event, cov$time_to_event <= 0 & cov$hospital_treat == "Home" , NA)
cov$time_to_event <- replace(cov$time_to_event, cov$time_to_event < 0, NA)
cov$time_after_vax <- replace(cov$time_after_vax, cov$time_after_vax < 0, NA)
cov$time_in_hospital <- replace(cov$time_in_hospital, cov$time_in_hospital <= 0, NA)
cov["age_group"] = cut(cov$age, c(0, 14, 24,34, 44, 54, 64, 74, 84, 94, Inf),
c("0-14","15-24","25-34","35-44","45-54","55-64",
"65-74","75-84","85-94","> 95"), include.lowest=TRUE)
hospitalis_all = cov %>%
dplyr::select(vac_status,status,wave,gender, age, hospital_treat) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(hospitalized = ifelse(hospital_treat=="Hospital",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
dplyr::select(age,wave,male,hospitalized,vacinated,case_fatality ) %>%
tbl_summary(
by = wave,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_p() %>%
as_flex_table()
hospitalis_all
cov = cov %>%
mutate(status = if_else(is.na(outcome_covid), "R", "D")) %>%
mutate(hospital_treat = ifelse(is.na(start_hospis), "Home", "Hospital")) %>%
mutate(wave = case_when(exam_date <='2021-01-23'~ "original_strain",
exam_date > '2021-01-23' & exam_date <= '2021-07-07' ~ "alpha",
exam_date > '2021-07-07' & exam_date <= '2022-01-26' ~ "delta",
exam_date > '2022-01-26'~ "omicron")) %>%
mutate(time_to_event = case_when(hospital_treat == "Hospital" ~difftime(start_hospis, exam_date, units = "days"),
hospital_treat == "Home" ~ 0)) %>%
mutate(time_in_hospital = case_when(hospital_treat == "Hospital" ~difftime(end_hospis, start_hospis, units = "days"),
hospital_treat == "Home" ~ 0)) %>%
mutate(time_to_event = as.numeric(time_to_event)) %>%
mutate(time_in_hospital = as.numeric(time_in_hospital)) %>%
mutate(vax_status = if_else(is.na(vaccine_name), "No_vax", "Vax")) %>%
mutate(vac_status = case_when(vax_status == "Vax" & lastvac_date < exam_date ~ "Vax",
TRUE ~ "No_vax")) %>%
dplyr::select(-vax_status) %>%
mutate(time_after_vax = case_when(vac_status == "Vax" ~ difftime(exam_date,lastvac_date, units = "days"),
vac_status == "No_vax"  ~ 0)) %>%
mutate(time_after_vax = as.numeric(time_after_vax))
cov$time_to_event <- replace(cov$time_to_event, cov$time_to_event <= 0 & cov$hospital_treat == "Home" , NA)
cov$time_to_event <- replace(cov$time_to_event, cov$time_to_event < 0, NA)
cov$time_after_vax <- replace(cov$time_after_vax, cov$time_after_vax < 0, NA)
cov$time_in_hospital <- replace(cov$time_in_hospital, cov$time_in_hospital <= 0, NA)
cov["age_group"] = cut(cov$age, c(0, 14, 24,34, 44, 54, 64, 74, 84, 94, Inf),
c("0-14","15-24","25-34","35-44","45-54","55-64",
"65-74","75-84","85-94","> 95"), include.lowest=TRUE)
hospitalis_all = cov %>%
dplyr::select(vac_status,status,wave,gender, age, hospital_treat) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(hospitalized = ifelse(hospital_treat=="Hospital",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
dplyr::select(age,wave,male,hospitalized,vacinated,case_fatality ) %>%
tbl_summary(
by = wave,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_p() %>%
as_flex_table()
hospitalis_all
hospitalis_R = cov %>%
filter(status== "R") %>%
dplyr::select(vac_status,wave,gender, age, hospital_treat) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(hospitalized = ifelse(hospital_treat=="Hospital",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
dplyr::select(age,wave,male,hospitalized,vacinated) %>%
tbl_summary(
by = wave,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_p() %>%
as_flex_table()
hospitalis_R
hospitalis_hospitals = cov %>%
filter(hospital_treat=="Hospital") %>%
dplyr::select(vac_status,wave,gender, status,age) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
dplyr::select(age,wave,male,vacinated,case_fatality) %>%
tbl_summary(
by = wave,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_p() %>%
as_flex_table()
hospitalis_hospitals
hospitalis_D = cov %>%
filter(status== "D") %>%
dplyr::select(vac_status,wave,gender, age, hospital_treat) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(hospitalized = ifelse(hospital_treat=="Hospital",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
dplyr::select(age,wave,male,hospitalized,vacinated) %>%
tbl_summary(
by = wave,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_p() %>%
as_flex_table()
hospitalis_D
hospitalis_hospitals = cov %>%
filter(hospital_treat=="Hospital") %>%
dplyr::select(vac_status,wave,gender, status,age) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
dplyr::select(age,wave,male,vacinated,case_fatality) %>%
tbl_summary(
by = wave,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_p() %>%
as_flex_table()
hospitalis_hospitals
hospitalis_hos = cov %>%
dplyr::select(hospital_treat,vac_status,wave,gender, status,age) %>%
mutate(male = ifelse(gender=="M",1,0)) %>%
mutate(vacinated = ifelse(vac_status =="Vax",1,0)) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
dplyr::select(hospital_treat,age,male,vacinated,case_fatality) %>%
tbl_summary(
by = hospital_treat,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)")) %>%
add_difference() %>%
as_flex_table()
hospitalis_hos
procent_death =
cov %>%
select(status, vac_status) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
select(-status) %>%
tbl_summary(
by  = vac_status
) %>%
add_difference()
procent_death
procent_death =
cov %>%
select(status, vac_status) %>%
mutate(case_fatality = ifelse(status == "R",0,1)) %>%
select(-status) %>%
tbl_summary(
by  = vac_status
) %>%
add_difference() %>%
as_flex_table()
procent_death
cov = cov %>%
mutate(comp_outcome = case_when(hospital_treat == "Home" ~ "Recovery",
status == "D" ~ "Death",
TRUE ~ "Hospitalized"))
cov
province_v = cov %>%
filter(vac_status == "Vax") %>%
freq_table(province,comp_outcome) %>%
rename(n_vacinated = n,
vac_prop = prop) %>%
select(-n_vacinated) %>%
pivot_wider(names_from = comp_outcome, values_from = vac_prop) %>%
rename(case_fatality_v = Death,
hospitalized_freq_v = Hospitalized,
recovery_freq_v=Recovery)
province_nv = cov %>%
filter(vac_status == "No_vax") %>%
freq_table(province,comp_outcome) %>%
rename(non_vax_n = n,
non_vac_prop = prop) %>%
select(-non_vax_n) %>%
pivot_wider(names_from = comp_outcome, values_from = non_vac_prop)%>%
rename(case_fatality_nv = Death,
hospitalized_freq_nv = Hospitalized,
recovery_freq_nv=Recovery)
province_all = province_v %>%
inner_join(province_nv) %>%
mutate(case_fatality = case_fatality_v - case_fatality_nv,
hospitalized_freq = case_fatality_v - case_fatality_nv,
) %>%
select(-c(recovery_freq_v,recovery_freq_nv)) %>%
flextable() %>%
add_header_row(values = c("","Vacinated", "Not vacinated", "Difference - Vac-Not_vac"), colwidths = c(1,2,2,2))
province_all
province_v = cov %>%
filter(vac_status == "Vax") %>%
freq_table(province,comp_outcome) %>%
rename(n_vacinated = n,
vac_prop = prop) %>%
select(-n_vacinated) %>%
pivot_wider(names_from = comp_outcome, values_from = vac_prop) %>%
rename(case_fatality_v = Death,
hospitalized_freq_v = Hospitalized,
recovery_freq_v=Recovery)
province_nv = cov %>%
filter(vac_status == "No_vax") %>%
freq_table(province,comp_outcome) %>%
rename(non_vax_n = n,
non_vac_prop = prop) %>%
select(-non_vax_n) %>%
pivot_wider(names_from = comp_outcome, values_from = non_vac_prop)%>%
rename(case_fatality_nv = Death,
hospitalized_freq_nv = Hospitalized,
recovery_freq_nv=Recovery)
province_all = province_v %>%
inner_join(province_nv) %>%
mutate(case_fatality = case_fatality_v - case_fatality_nv,
hospitalized_freq = case_fatality_v - case_fatality_nv,
) %>%
select(-c(recovery_freq_v,recovery_freq_nv)) %>%
flextable() %>%
add_header_row(values = c("","Vacinated", "Not vacinated", "Difference - Vac-Not_vac"), colwidths = c(1,2,2,2))
province_all
timing = cov %>%
filter(hospital_treat == "Hospital") %>%
select(status,time_to_event, time_in_hospital) %>%
tbl_summary(by = status,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"),
missing="no") %>%
add_difference() %>%
as_flex_table()
timing
timing_nvax = cov %>%
filter(hospital_treat == "Hospital") %>%
filter(vac_status == "No_vax") %>%
select(status,time_to_event, time_in_hospital) %>%
tbl_summary(by = status,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"),
missing="no") %>%
add_difference() %>%
as_flex_table()
timing_nvax
vax_status = cov %>%
mutate(vaccinated = if_else(is.na(vaccine_name), 0, 1)) %>%
select(vaccinated, status) %>%
tbl_summary(by = status, # split table by group
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_dichotomous() ~ "{p}%"),
missing = "no") %>%
add_n() %>% # add column with total number of non-missing observations
add_difference() %>%
as_flex_table()
vax_status
